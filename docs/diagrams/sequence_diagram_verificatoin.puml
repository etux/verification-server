@startuml
autonumber

actor User

participant Bot

participant VerificationServer as VS
participant Web
participant Verifier
participant WebRTC

User -> Bot: Request verification
note right
While we use the Bot as the entry point
for users to request verification, it can be a web app,
a mobile app, etc.
endnote

alt request not trusted (bot has not been previously regVSter in the Identity Server)
    Bot -> User: userId not valid/available
else request trusted (with user idenntifier available)
    Bot -> VS: Request verification (with bot id + user id)
    alt verification allows regVStering volunteer in our datastore
        VS -> Bot: Send verification request details input URL (user id + verification request id)
        Bot -> User: Send verification link for adding details (verification request id)
        User -> Web: Provides data for verification process (verification request id)
        Web -> VS: Submit verification details (verification request id)
        VS -> VS: Stores verification details
        VS -> Verifier: Request verification (verification request id + url to details)
        note right
        Verifier can be a verified volunteer
        behind a web cam but can also be a machine
        offering a verification API
        endnote
        Verifier -> Web: Access verification details
        Web -> VS: Access user details
    else verification does not allow regVStering volunteer in our datastore
        VS -> Verifier: Request verification (verification request id + external url for details)
    end
    Verifier -> VS: Accept verification Request
    VS -> Bot: Request user availability for verification
    Bot -> User: Request user availability
    alt user VS available
        User -> Bot: Accepts verification call
        Bot -> VS: Informs user VS ready for verification
        VS -> WebRTC: Create room for Verification Request (verification request + verifier id + user id)
        WebRTC -> VS: Room details
        VS -> Verifier: Forward verification URL
        VS -> Bot: Forward verification URL
        Bot -> User: Send message with verification URL
        Verifier -> WebRTC: Join Room
        User -> WebRTC: Join Room
        Verifier -> VS: Send verification result
        VS -> VS: Stores verification result (audited)
        VS -> Bot: Send verification result
        Bot -> User: Send verification result
    else user VS not available (or does not respond in x time)
        User -> Bot: Rejects verification call
        Bot -> VS: Informs user VS not ready for verification
        VS -> Verifier: calls off verification
    end
end

@enduml